package cmd

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"

	"net/http"
	"os"
	"time"

	"github.com/qovery/qovery-cli/utils"
	"github.com/spf13/cobra"
)

var deployCmd = &cobra.Command{
	Use:   "deploy",
	Short: "Print the deploy of your application",
	Run: func(cmd *cobra.Command, args []string) {
		utils.Capture(cmd)
		token, err := utils.GetAccessToken()
		if err != nil {
			utils.PrintlnError(err)
			os.Exit(0)
		}
		application, name, err := utils.CurrentApplication()
		if err != nil {
			utils.PrintlnError(err)
			os.Exit(0)
		}

		fmt.Print(application)

		var bearer = "Bearer " + token

		id := getCommitID(string(bearer), string(application))
		
		var jsonStr = []byte(`{"git_commit_id": "` + id + `"}`)
		
		req, err := http.NewRequest("POST", "https://api.qovery.com/application/"+string(application)+"/deploy", bytes.NewBuffer(jsonStr))

		req.Header.Add("Authorization", string(bearer))
		req.Header.Add("Content-Type", "application/json")
	
		client := &http.Client{}
			resp, err := client.Do(req)
			if err != nil {
				utils.PrintlnError(err)
				os.Exit(0)
			}
			
			if resp.StatusCode == 400 {
				fmt.Println("Application " + name + " is already deployed or an optional is in progress")
				os.Exit(0)
			} else if resp.StatusCode >= 400 {
				utils.PrintlnError(errors.New("Received " + resp.Status + " response while listing organizations. "))
				os.Exit(0)
			}
			if resp.StatusCode == 202 {
			fmt.Println("Application " + name + " deploy has been requested")
			}
	},
}

func init() {
	rootCmd.AddCommand(deployCmd)
}

func getCommitID(bearer string, application string) (string) {
	req, err := http.NewRequest("GET", "https://api.qovery.com/application/"+string(application)+"/commit", nil)

	req.Header.Add("Authorization", string(bearer))
	req.Header.Add("Content-Type", "application/json")

	client := &http.Client{}
		resp, err := client.Do(req)
		if err != nil {
			utils.PrintlnError(err)
			os.Exit(0)
		}
		if resp.StatusCode > 400 {
			utils.PrintlnError(errors.New("Received " + resp.Status + " response while listing organizations. "))
		}

		data, _ := ioutil.ReadAll(resp.Body)

		type AutoGenerated struct {
			Results []struct {
				CreatedAt       time.Time `json:"created_at"`
				GitCommitID     string    `json:"git_commit_id"`
				Tag             string    `json:"tag"`
				Message         string    `json:"message"`
				AuthorName      string    `json:"author_name"`
				AuthorAvatarURL string    `json:"author_avatar_url"`
			} `json:"results"`
		}

		var jsonData AutoGenerated
		json.Unmarshal([]byte(data), &jsonData)
		var commitId = jsonData.Results[0].GitCommitID
		return commitId
}